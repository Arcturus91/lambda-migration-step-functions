AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Lancemonos Video Processing Pipeline with Step Functions

Resources:
  # SQS Queue and DLQ
  VideoProcessingDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600 # 14 days
      
  VideoProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt VideoProcessingDLQ.Arn
        maxReceiveCount: 3

  # S3 Buckets
  VideoProcessingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ln-init-processor-video
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt VideoProcessingQueue.Arn
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000

  AudioStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ln-audio-register
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000

  # Common IAM Role for all Lambda functions
  LancemonosLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:HeadObject
                Resource:
                  - !Sub "arn:aws:s3:::${VideoProcessingBucket}/*"
                  - !Sub "arn:aws:s3:::${AudioStorageBucket}/*"
                  - !Sub "arn:aws:s3:::lancemonos-nomas-transcripts/*"
        - PolicyName: SNSPublishPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource:
                  - "arn:aws:sns:sa-east-1:905418161107:Errors-in-lambdas-Lancemonos"
                  - "arn:aws:sns:sa-east-1:905418161107:Notifications-in-lambdas-Lancemonos"
        # Added SSM Parameter Policy
        - PolicyName: SSMParameterPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - "arn:aws:ssm:sa-east-1:905418161107:parameter/lancemonos/openai/api-key"
        # Added SQS policy for event source mapping
        - PolicyName: SQSAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource: !GetAtt VideoProcessingQueue.Arn
        # Added Step Functions policy to start executions
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: "*"

  # Shared Lambda Layer
  SharedUtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: lancemonos-shared-utils
      Description: Shared utilities for Lancemonos Lambda functions
      ContentUri: src/functions/shared-layer/
      CompatibleRuntimes:
        - nodejs20.x
      RetentionPolicy: Retain

  # Lambda Functions
  InitializeFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: nodejs20.x
    Properties:
      CodeUri: src/functions/initialize/
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Timeout: 30
      MemorySize: 128
      Role: !GetAtt LancemonosLambdaRole.Arn
      Layers:
        - !Ref SharedUtilsLayer
        - "arn:aws:lambda:sa-east-1:905418161107:layer:nodejs-deps:2"
      Environment:
        Variables:
          OPENAI_API_KEY: !Sub "{{resolve:ssm:/lancemonos/openai/api-key}}"
          STATE_MACHINE_ARN: !Ref VideoProcessingStateMachine
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt VideoProcessingQueue.Arn
            BatchSize: 1

  DownloadExtractFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: nodejs20.x
    Properties:
      CodeUri: src/functions/download-extract/
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Timeout: 600
      MemorySize: 1024
      Role: !GetAtt LancemonosLambdaRole.Arn
      Layers:
        - !Ref SharedUtilsLayer
        - "arn:aws:lambda:sa-east-1:905418161107:layer:nodejs-deps:2"
        - "arn:aws:lambda:sa-east-1:905418161107:layer:ffmpeg:3"
      Environment:
        Variables:
          OPENAI_API_KEY: !Sub "{{resolve:ssm:/lancemonos/openai/api-key}}"
          AUDIO_BUCKET: !Ref AudioStorageBucket

  TranscribeChunksFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: nodejs20.x
    Properties:
      CodeUri: src/functions/transcribe-chunks/
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Timeout: 900
      MemorySize: 2048
      Role: !GetAtt LancemonosLambdaRole.Arn
      Layers:
        - !Ref SharedUtilsLayer
        - "arn:aws:lambda:sa-east-1:905418161107:layer:nodejs-deps:2"
        - "arn:aws:lambda:sa-east-1:905418161107:layer:openai-lambda-layer:1"
      Environment:
        Variables:
          OPENAI_API_KEY: !Sub "{{resolve:ssm:/lancemonos/openai/api-key}}"
          AUDIO_BUCKET: !Ref AudioStorageBucket

  NotifyFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: nodejs20.x
    Properties:
      CodeUri: src/functions/notify/
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Timeout: 60
      MemorySize: 128
      Role: !GetAtt LancemonosLambdaRole.Arn
      Layers:
        - !Ref SharedUtilsLayer
        - "arn:aws:lambda:sa-east-1:905418161107:layer:nodejs-deps:2"
      Environment:
        Variables:
          TOPIC_SNS_NOTIFICATION: "arn:aws:sns:sa-east-1:905418161107:Notifications-in-lambdas-Lancemonos"
          TOPIC_SNS_ERROR: "arn:aws:sns:sa-east-1:905418161107:Errors-in-lambdas-Lancemonos"
          OPENAI_API_KEY: !Sub "{{resolve:ssm:/lancemonos/openai/api-key}}"

  # Step Functions State Machine - Define before referencing in InitializeFunction
  VideoProcessingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine.asl.yml
      Role: !GetAtt StepFunctionsExecutionRole.Arn
      Type: STANDARD
      DefinitionSubstitutions:
        DownloadExtractFunctionArn: !GetAtt DownloadExtractFunction.Arn
        TranscribeChunksFunctionArn: !GetAtt TranscribeChunksFunction.Arn
        NotifyFunctionArn: !GetAtt NotifyFunction.Arn
        AudioBucket: !Ref AudioStorageBucket

  # Step Functions Role
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt DownloadExtractFunction.Arn
                  - !GetAtt TranscribeChunksFunction.Arn
                  - !GetAtt NotifyFunction.Arn

  # SQS policy to allow S3 to send messages
  SQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref VideoProcessingQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt VideoProcessingQueue.Arn
            Condition:
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:s3:::${VideoProcessingBucket}"

Outputs:
  StateMachineArn:
    Description: ARN of the Step Functions State Machine
    Value: !Ref VideoProcessingStateMachine

  VideoProcessingQueueUrl:
    Description: URL of the SQS Queue for video processing
    Value: !Ref VideoProcessingQueue

  VideoProcessingDLQUrl:
    Description: URL of the Dead Letter Queue
    Value: !Ref VideoProcessingDLQ
    
  VideoProcessingBucketName:
    Description: Name of the S3 bucket for video input
    Value: !Ref VideoProcessingBucket
    
  AudioStorageBucketName:
    Description: Name of the S3 bucket for audio storage
    Value: !Ref AudioStorageBucket